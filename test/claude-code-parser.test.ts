import { describe, it, expect, beforeEach } from 'vitest'
import { ClaudeCodeParser } from '../src/parsers/claude-code-parser'

describe('ClaudeCodeParser', () => {
  let parser: ClaudeCodeParser

  beforeEach(() => {
    parser = new ClaudeCodeParser()
  })

  it('should filter out isMeta messages', () => {
    const testData = `{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."},"isMeta":true,"uuid":"test-uuid","timestamp":"2025-09-23T00:03:29.998Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"This should be processed normally."},"uuid":"test-uuid-2","timestamp":"2025-09-23T00:12:26.299Z"}`

    const results = parser.parse(testData)

    expect(results).toHaveLength(1)
    expect(results[0].content).toBe('This should be processed normally.')
    expect(results[0].role).toBe('user')
  })

  it('should filter out command tag messages', () => {
    const testData = `{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"<command-name>/clear</command-name>\\n            <command-message>clear</command-message>\\n            <command-args></command-args>"},"uuid":"test-uuid-1","timestamp":"2025-09-23T00:03:29.993Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"<local-command-stdout></local-command-stdout>"},"uuid":"test-uuid-2","timestamp":"2025-09-23T00:03:29.998Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"This is a normal user message."},"uuid":"test-uuid-3","timestamp":"2025-09-23T00:12:26.299Z"}`

    const results = parser.parse(testData)

    expect(results).toHaveLength(1)
    expect(results[0].content).toBe('This is a normal user message.')
    expect(results[0].role).toBe('user')
  })

  it('should filter out caveat messages by pattern', () => {
    const testData = `{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"Caveat: The messages below were generated by the user while running local commands"},"uuid":"test-uuid-1","timestamp":"2025-09-23T00:03:29.993Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"Regular message that should pass through."},"uuid":"test-uuid-2","timestamp":"2025-09-23T00:12:26.299Z"}`

    const results = parser.parse(testData)

    expect(results).toHaveLength(1)
    expect(results[0].content).toBe('Regular message that should pass through.')
  })

  it('should process assistant messages normally', () => {
    const testData = `{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","message":{"id":"msg_test","type":"message","role":"assistant","model":"claude-sonnet-4","content":[{"type":"text","text":"This is an assistant response."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"output_tokens":10}},"requestId":"req_test","type":"assistant","uuid":"test-uuid","timestamp":"2025-09-23T00:12:32.422Z"}`

    const results = parser.parse(testData)

    expect(results).toHaveLength(1)
    expect(results[0].content).toBe('This is an assistant response.')
    expect(results[0].role).toBe('assistant')
  })

  it('should handle mixed valid and invalid messages', () => {
    const testData = `{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages."},"isMeta":true,"uuid":"test-uuid-1","timestamp":"2025-09-23T00:03:29.998Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"<command-name>/clear</command-name>"},"uuid":"test-uuid-2","timestamp":"2025-09-23T00:03:29.993Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"Valid user message"},"uuid":"test-uuid-3","timestamp":"2025-09-23T00:05:00.000Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","message":{"id":"msg_test","type":"message","role":"assistant","content":[{"type":"text","text":"Assistant response"}]},"type":"assistant","uuid":"test-uuid-4","timestamp":"2025-09-23T00:05:30.000Z"}`

    const results = parser.parse(testData)

    expect(results).toHaveLength(2)
    expect(results[0].content).toBe('Valid user message')
    expect(results[0].role).toBe('user')
    expect(results[1].content).toBe('Assistant response')
    expect(results[1].role).toBe('assistant')
  })

  it('should handle empty and whitespace-only messages', () => {
    const testData = `{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":""},"uuid":"test-uuid-1","timestamp":"2025-09-23T00:03:29.993Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"   \\n\\t  "},"uuid":"test-uuid-2","timestamp":"2025-09-23T00:03:29.998Z"}
{"parentUuid":"test-parent","isSidechain":false,"userType":"external","cwd":"/Users/test","sessionId":"test-session","version":"1.0.120","gitBranch":"main","type":"user","message":{"role":"user","content":"Valid message"},"uuid":"test-uuid-3","timestamp":"2025-09-23T00:12:26.299Z"}`

    const results = parser.parse(testData)

    expect(results).toHaveLength(1)
    expect(results[0].content).toBe('Valid message')
  })

  it('isCommandMessage method should detect command patterns', () => {
    const testCases = [
      { content: '<command-name>/clear</command-name>', expected: true },
      { content: '<command-message>clear</command-message>', expected: true },
      { content: '<command-args></command-args>', expected: true },
      { content: '<local-command-stdout></local-command-stdout>', expected: true },
      { content: 'Caveat: The messages below were generated by the user while running local commands', expected: true },
      { content: 'CAVEAT: The messages below were generated by the user while running local commands', expected: true },
      { content: 'This is a normal message', expected: false },
      { content: 'Some text with <not-a-command> tag', expected: false },
      { content: 'Regular conversation about commands', expected: false },
    ]

    testCases.forEach(({ content, expected }) => {
      // Access private method for testing
      const result = (parser as any).isCommandMessage(content)
      expect(result).toBe(expected)
    })
  })
})
